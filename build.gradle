plugins {
    id("com.google.cloud.tools.jib") apply false
    id("java")
    id("org.springframework.boot")
    id("io.spring.dependency-management")
    id("jacoco")
    id("checkstyle")
    id("pmd")
    id("org.sonarqube")
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

apply(from: "${rootDir}/config/lint/pmd.gradle")
apply(from: "${rootDir}/config/lint/checkstyle.gradle")

allprojects {
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/release" }
    }
}

sonarqube {
    def exclusions = extractQClass()
    file("${rootDir}/config/jacoco/exclude-coverage.txt").eachLine {
        exclusions.add(it)
    }

    properties {
        property("sonar.projectKey", System.getenv("SONAR_PROJECT_KEY"))
        property("sonar.organization", "dailyge")
        property("sonar.host.url", System.getenv("SONAR_HOST_URL"))
        property("sonar.login", System.getenv("SONAR_TOKEN"))
        property("sonar.language", "Java")
        property("sonar.sourceEncoding", "UTF-8")
        property("sonar.exclusions", exclusions.join(", "))
        property("sonar.java.coveragePlugin", "jacoco")
        property("sonar.coverage.jacoco.xmlReportPaths",
                "${rootDir}/dailyge-api/build/reports/jacoco/test/jacocoTestReport.xml, " +
                        "${rootDir}/storage/rdb/build/reports/jacoco/test/jacocoTestReport.xml")
    }
}

subprojects {
    apply(plugin: "jacoco")
    apply(plugin: "java")
    apply(plugin: "java-library")
    apply(plugin: "org.springframework.boot")
    apply(plugin: "io.spring.dependency-management")
    apply(plugin: "application")
    apply(plugin: "com.google.cloud.tools.jib")

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {
        // Test
        testImplementation("org.springframework.boot:spring-boot-starter-test")

        // QueryDsl
        implementation("com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta")

        // Lombok
        compileOnly("org.projectlombok:lombok:${lombokVersion}")
        annotationProcessor("org.projectlombok:lombok:${lombokVersion}")

        // AnnotationProcessor
        annotationProcessor("com.querydsl:querydsl-apt:${queryDslVersion}:jakarta")
        annotationProcessor("jakarta.annotation:jakarta.annotation-api")
        annotationProcessor("jakarta.persistence:jakarta.persistence-api")
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
            html.required = true
            csv.required = false
        }

        def exclusions = extractQClass()
        file("${rootDir}/config/jacoco/exclude-coverage.txt").eachLine {
            exclusions.add(it)
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: exclusions)
            }))
        }
        finalizedBy jacocoTestCoverageVerification
    }

    jacocoTestCoverageVerification {
        def exclusions = extractQClass()
        file("${rootDir}/config/jacoco/exclude-verification.txt").eachLine {
            exclusions.add(it)
        }

        violationRules {
            rule {
                enabled = true
                element = "CLASS"

                limit {
                    counter = "LINE"
                    value = "COVEREDRATIO"
                    minimum = 0.50
                }
                limit {
                    counter = "BRANCH"
                    value = "COVEREDRATIO"
                    minimum = 0.50
                }
                limit {
                    counter = "COMPLEXITY"
                    value = "COVEREDRATIO"
                    minimum = 0.50
                }
            }
        }
    }

    tasks.test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }
}

static def extractQClass() {
    def qClasses = []
    for (qPattern in "QA".."QZ") {
        qClasses.add("**/*$qPattern*")
    }
    return qClasses
}

bootJar {
    enabled = false
}
