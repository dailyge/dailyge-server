<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!-- Naver coding convention for Java (version 1.2)  -->
<!-- This rule file requires Checkstyle version 8.24 or above. -->

<!--
The following rules in the Naver coding convention cannot be checked by this configuration file.

- [avoid-korean-pronounce]
- [class-noun]
- [interface-noun-adj]
- [method-verb-preposition]
- [space-after-bracket]
- [space-around-comment]
-->

<module name="Checker">
    <module name="RegexpMultiline">
        <property name="format" value="\r\n"/>
        <property name="message" value="[newline-lf] Line must end with LF, not CRLF"/>
    </module>
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf"/>
    </module>

    <module name="RegexpSingleline">
        <property name="format" value="^(?!\s+\* $).*?\s+$"/>
        <property name="message" value="[no-trailing-spaces] Line has trailing spaces."/>
    </module>

    <module name="LineLength">
        <message key="maxLineLen"
                 value="[line-length-350] Line is longer than {0,number,integer} characters (found {1,number,integer})"/>
        <property name="ignorePattern"
                  value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
        <property name="max" value="350"/>
    </module>

    <module name="TreeWalker">
        <module name="ParameterNumber">
            <property name="max" value="15"/>
        </module>

        <message key="name.invalidPattern"
                 value="[1-top-level-class] one.top.level.class=Top-level class {0} has to reside in its own source file."/>

        <module name="PackageName">
            <message key="name.invalidPattern"
                     value="[package-lowercase] Package name ''{0}'' must match pattern ''{1}''."/>
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
        </module>

        <module name="TypeName">
            <message key="name.invalidPattern"
                     value="[class-interface-lower-camelcase] Type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="MethodName">
            <message key="name.invalidPattern"
                     value="[method-lower-camelcase] Method name ''{0}'' must match pattern ''{1}''."/>
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
        </module>
        <module name="MemberName">
            <message key="name.invalidPattern"
                     value="[var-lower-camelcase] Member name ''{0}'' must match pattern ''{1}''."/>
            <property name="format" value="^[a-z][a-zA-Z0-9][a-zA-Z0-9]*$"/>
        </module>

        <module name="ParameterName">
            <message key="name.invalidPattern"
                     value="[var-lower-camelcase] Parameter name ''{0}'' must match pattern ''{1}''."/>
            <property name="format" value="^[a-z][a-zA-Z0-9][a-zA-Z0-9]*$"/>
        </module>

        <module name="LocalVariableName">
            <message key="name.invalidPattern"
                     value="[var-lower-camelcase][avoid-1-char-var] Local variable name ''{0}'' must match pattern ''{1}''."/>
            <property name="format" value="^[a-z][a-zA-Z0-9][a-zA-Z0-9]*$"/>
            <property name="allowOneCharVarInForLoop" value="true"/>
            <property name="tokens" value="VARIABLE_DEF"/>
        </module>
        <module name="OneTopLevelClass"/>

        <module name="AvoidStarImport">
            <message key="import.avoidStar"
                     value="[avoid-star-import] Using the ''.*'' form of import should be avoided - {0}."/>
            <property name="allowStaticMemberImports" value="true"/>
        </module>

        <module name="ModifierOrder">
            <message key="mod.order"
                     value="[modifier-order] ''{0}'' modifier out of order with the JLS suggestions."/>
            <message key="annotation.order"
                     value="[modifier-order] ''{0}'' annotation modifier does not precede non-annotation modifiers."/>
        </module>

        <module name="AnnotationLocation">
            <message key="annotation.location.alone"
                     value="[newline-after-annotation] Annotation ''{0}'' should be alone on line."/>
            <property name="allowSamelineSingleParameterlessAnnotation" value="true"/>
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>

        <module name="OneStatementPerLine">
            <message key="needBraces"
                     value="[1-state-per-line] Only one statement per line allowed."/>
        </module>

        <module name="MultipleVariableDeclarations">
            <message key="multiple.variable.declarations"
                     value="[1-var-per-declaration] Only one variable definition per line allowed."/>
            <message key="multiple.variable.declarations.comma"
                     value="[1-var-per-declaration] Each variable declaration must be in its own statement."/>
        </module>

        <module name="ArrayTypeStyle">
            <message key="array.type.style"
                     value="[array-square-after-type] Array brackets at illegal position."/>
        </module>

        <module name="UpperEll">
            <message key="upperEll" value="[long-value-suffix] Should use uppercase ''L''."/>
        </module>

        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format"
                      value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message"
                      value="[array-square-after-type]  Avoid using corresponding octal or Unicode escape."/>
        </module>

        <module name="LeftCurly">
            <message key="line.break.after"
                     value="[braces-knr-style] ''{0}'' at column {1} should have line break after."/>
            <message key="line.new"
                     value="[braces-knr-style] ''{0}'' at column {1} should be on a new line."/>
            <message key="line.previous"
                     value="[braces-knr-style] ''{0}'' at column {1} should be on the previous line."/>
        </module>

        <module name="RightCurly">
            <message key="line.alone"
                     value="[braces-knr-style] ''{0}'' at column {1} should be alone on a line."/>
            <message key="line.break.before"
                     value="[braces-knr-style] =''{0}'' at column {1} should have line break before."/>
            <message key="line.new"
                     value="[braces-knr-style] ''{0}'' at column {1} should be on a new line."/>
            <property name="tokens"
                      value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT"/>
            <property name="option" value="alone"/>
        </module>

        <module name="RightCurly">
            <message key="line.same"
                     value="[sub-flow-after-brace] ''{0}'' at column {1} should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else or try/catch/finally)."/>
            <message key="line.break.before"
                     value="[sub-flow-after-brace] ''{0}'' at column {1} should have line break before."/>
            <property name="option" value="same"/>
            <property name="tokens"
                      value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO"/>
        </module>

        <module name="NeedBraces">
            <message key="needBraces"
                     value="[need-braces] ''{0}'' statement must use '''{}'''s."/>
        </module>

        <module name="NoLineWrap">
            <message key="no.line.wrap"
                     value="[1-line-package-import] {0} statement should not be line-wrapped."/>
            <property name="tokens" value="PACKAGE_DEF, IMPORT"/>
        </module>

        <module name="Indentation">
            <property name="basicOffset" value="4"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="4"/>
            <property name="throwsIndent" value="4"/>
            <property name="lineWrappingIndentation" value="4"/>
            <property name="arrayInitIndent" value="4"/>
        </module>

        <module name="SeparatorWrap">
            <message key="line.previous"
                     value="[line-wrapping-position] ''{0}'' should be on the previous line."/>
            <property name="option" value="EOL"/>
            <property name="tokens" value="COMMA"/>
        </module>

        <module name="SeparatorWrap">
            <message key="line.new"
                     value="[line-wrapping-position] ''{0}'' should be on a new line."/>
            <property name="option" value="NL"/>
            <property name="tokens" value="DOT"/>
        </module>

        <module name="OperatorWrap">
            <message key="line.new"
                     value="[line-wrapping-position] ''{0}'' should be on a new line."/>
            <property name="tokens"
                      value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR "/>
            <property name="option" value="NL"/>
        </module>

        <module name="EmptyLineSeparator">
            <message key="empty.line.separator"
                     value="[blankline-between-methods] ''{0}'' should be separated from previous statement."/>
            <property name="tokens" value="METHOD_DEF"/>
        </module>

        <module name="WhitespaceAround">
            <message key="ws.notFollowed"
                     value="[space-around-brace] ''{0}'' is not followed by whitespace."/> <!-- [permit-concise-empty-block] -->
            <message key="ws.notPreceded"
                     value="[space-around-brace] ''{0}'' is not preceded with whitespace."/>  <!-- [permit-concise-empty-block] -->
            <property name="allowEmptyLoops" value="true"/>  <!-- [permit-concise-empty-block] -->
            <property name="tokens" value="LCURLY, RCURLY, SLIST"/>
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
        </module>

        <module name="WhitespaceAround">
            <message key="ws.notFollowed"
                     value="[space-between-keyword-parentheses] ''{0}'' is not followed by whitespace."/>
            <message key="ws.notPreceded"
                     value="[space-between-keyword-parentheses] ''{0}'' is not preceded with whitespace."/>
            <property name="tokens" value="
				DO_WHILE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,
			 	LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE,"
            />
        </module>

        <module name="MethodParamPad">
            <message key="line.previous"
                     value="[no-space-between-identifier-parentheses] ''{0}'' should be on the previous line."/>
            <message key="ws.preceded"
                     value="[no-space-between-identifier-parentheses] ''{0}'' is preceded with whitespace."/>
        </module>

        <module name="TypecastParenPad">
            <message key="ws.followed"
                     value="[no-space-typecasting] ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded"
                     value="[no-space-typecasting] ''{0}'' is preceded with whitespace."/>
            <property name="tokens" value="RPAREN,TYPECAST"/>
        </module>

        <module name="GenericWhitespace">
            <message key="ws.followed"
                     value="[generic-whitespace] ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded"
                     value="[generic-whitespace] ''{0}'' is preceded with whitespace."/>
            <message key="ws.illegalFollow"
                     value="[generic-whitespace] ''{0}'' should followed by whitespace."/>
            <message key="ws.notPreceded"
                     value="[generic-whitespace] ''{0}'' is not preceded with whitespace."/>
        </module>

        <module name="WhitespaceAfter">
            <message key="ws.notFollowed"
                     value="[space-after-comma-semicolon]: ''{0}'' is not followed by whitespace."/>
            <property name="tokens" value="COMMA,SEMI"/>
        </module>

        <module name="NoWhitespaceBefore">
            <message key="ws.preceded"
                     value="[space-after-comma-semicolon] ''{0}'' is preceded with whitespace."/>
            <property name="tokens" value="COMMA,SEMI"/>
        </module>
        <module name="WhitespaceAround">
            <message key="ws.notFollowed"
                     value="[space-around-colon] ''{0}'' is not followed by whitespace."/>
            <message key="ws.notPreceded"
                     value="[space-around-colon] ''{0}'' is not preceded with whitespace."/>
            <property name="tokens" value="COLON"/>
            <property name="ignoreEnhancedForColon" value="false"/>
        </module>

        <module name="NoWhitespaceBefore">
            <message key="ws.preceded"
                     value="[no-space-unary-operator] ''{0}'' is preceded with whitespace."/>
            <property name="tokens" value="POST_INC, POST_DEC"/>
        </module>

        <module name="NoWhitespaceAfter">
            <message key="ws.followed"
                     value="[no-space-unary-operator] whitespace ''{0}'' is followed by whitespace."/>
            <property name="tokens" value="INC, DEC, UNARY_MINUS, UNARY_PLUS, BNOT, LNOT"/>
        </module>

        <module name="WhitespaceAround">
            <message key="ws.notFollowed"
                     value="[space-around-binary-ternary-operator] ''{0}'' is not followed by whitespace."/>
            <message key="ws.notPreceded"
                     value="[space-around-binary-ternary-operator] ''{0}'' is not preceded with whitespace."/>
            <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, DIV,
				 DIV_ASSIGN, EQUAL, GE, GT, LAND, LE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL,
				 PLUS, PLUS_ASSIGN, QUESTION, SL, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND"/>
        </module>

        <module name="SuppressionCommentFilter">
            <property name="offCommentFormat" value="@checkstyle:off"/>
            <property name="onCommentFormat" value="@checkstyle:on"/>
        </module>

        <module name="SuppressWithNearbyCommentFilter">
            <property name="commentFormat" value="@checkstyle:ignore"/>
            <property name="checkFormat" value=".*"/>
            <property name="influenceFormat" value="0"/>
        </module>
        <property name="tabWidth" value="4"/>
    </module>

    <module name="SuppressionFilter">
        <property name="file" value="${suppressionFile}"/>
        <property name="optional" value="true"/>
    </module>

    <module name="BeforeExecutionExclusionFileFilter">
        <property name="fileNamePattern" value="module\-info\.java$"/>
    </module>
    <property name="severity" value="warning"/>

    <property name="fileExtensions" value="java"/>
    <property name="charset" value="UTF-8"/>
    <property name="tabWidth" value="4"/>
</module>
